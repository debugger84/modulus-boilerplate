// Package action provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/debugger84/oapi-codegen version v1.11.5 DO NOT EDIT.
package action

import (
	"context"
	"net/http"

	externalRef0 "boilerplate/internal/user/action"

	application "github.com/debugger84/modulus-application"
)

// Post defines model for Post.
type Post struct {
	Author *externalRef0.User `json:"author,omitempty"`
	Id     string             `json:"id"`
	Title  string             `json:"title"`
}

// PostList defines model for PostList.
type PostList = []Post

// PostId defines model for postId.
type PostId = string

// CreatePostBody defines model for CreatePostBody.
type CreatePostBody struct {
	Title string `json:"title"`
}

// GetPostListParams defines parameters for GetPostList.
type GetPostListParams struct {
	Count int `form:"count" json:"count"`
}

// ------------- Code generation for the "GetPostList" -------------
type GetPostListRequest struct {
	Count int `form:"count" json:"count"`
}
type GetPostListAction struct {
	runner    *application.ActionRunner
	processor GetPostListProcessor
}
type GetPostListProcessor interface {
	Process(ctx context.Context, request *GetPostListRequest) application.ActionResponse
}

func NewGetPostListAction(runner *application.ActionRunner, processor GetPostListProcessor) *GetPostListAction {
	return &GetPostListAction{runner: runner, processor: processor}
}

func (a *GetPostListAction) Handle(w http.ResponseWriter, r *http.Request) {
	a.runner.Run(
		w, r, func(ctx context.Context, request any) application.ActionResponse {
			return a.processor.Process(ctx, request.(*GetPostListRequest))
		}, &GetPostListRequest{},
	)
}

// ------------- Code generation for the "GetPost" -------------
type GetPostRequest struct {
	// Path parameter "id"
	Id PostId `json:"id"`
}
type GetPostAction struct {
	runner    *application.ActionRunner
	processor GetPostProcessor
}
type GetPostProcessor interface {
	Process(ctx context.Context, request *GetPostRequest) application.ActionResponse
}

func NewGetPostAction(runner *application.ActionRunner, processor GetPostProcessor) *GetPostAction {
	return &GetPostAction{runner: runner, processor: processor}
}

func (a *GetPostAction) Handle(w http.ResponseWriter, r *http.Request) {
	a.runner.Run(
		w, r, func(ctx context.Context, request any) application.ActionResponse {
			return a.processor.Process(ctx, request.(*GetPostRequest))
		}, &GetPostRequest{},
	)
}

//------ services initialization
type ModuleActions struct {
	routes *application.Routes
}

func NewModuleActions(
	getPostListAction *GetPostListAction,
	getPostAction *GetPostAction,
) *ModuleActions {
	routes := application.NewRoutes()

	routes.Get(
		"/posts",
		getPostListAction.Handle,
	)

	routes.Get(
		"/posts/:id",
		getPostAction.Handle,
	)

	return &ModuleActions{
		routes: routes,
	}
}

func (a *ModuleActions) Routes() []application.RouteInfo {
	return a.routes.GetRoutesInfo()
}

func ServiceProviders() []interface{} {
	return []interface{}{
		NewModuleActions,

		NewGetPostListAction,
		NewGetPostAction,
	}
}
