// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: post_query.sql

package storage

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getNewerPosts = `-- name: GetNewerPosts :many
select id, author_id, title, previewimage, content, created_at from "post"."post" order by "post".created_at DESC LIMIT $1
`

func (q *Queries) GetNewerPosts(ctx context.Context, limit int32) ([]Post, error) {
	rows, err := q.db.Query(ctx, getNewerPosts, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Title,
			&i.Previewimage,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
select id, author_id, title, previewimage, content, created_at from "post"."post" where id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Previewimage,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getPostsAfterCursor = `-- name: GetPostsAfterCursor :many
select id, author_id, title, previewimage, content, created_at from "post"."post"
where
    created_at < $1 OR
    (created_at = $2 AND id < $3)
order by "post".created_at DESC, "post".id DESC LIMIT $4
`

type GetPostsAfterCursorParams struct {
	CreatedAt   time.Time `db:"created_at" json:"createdAt"`
	CreatedAt_2 time.Time `db:"created_at_2" json:"createdAt2"`
	ID          uuid.UUID `db:"id" json:"id"`
	Limit       int32     `db:"limit" json:"limit"`
}

func (q *Queries) GetPostsAfterCursor(ctx context.Context, arg GetPostsAfterCursorParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsAfterCursor,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Title,
			&i.Previewimage,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsFirstPage = `-- name: GetPostsFirstPage :many
select id, author_id, title, previewimage, content, created_at from "post"."post" order by "post".created_at DESC, "post".id DESC LIMIT $1
`

func (q *Queries) GetPostsFirstPage(ctx context.Context, limit int32) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsFirstPage, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Title,
			&i.Previewimage,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
